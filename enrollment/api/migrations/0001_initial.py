# Generated by Django 5.1.3 on 2024-12-16 03:39

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(blank=True, max_length=100, null=True)),
                ('barangay', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(max_length=100)),
                ('province', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'address',
            },
        ),
        migrations.CreateModel(
            name='BillingList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=55)),
                ('category', models.CharField(choices=[('ASSESSMENT', 'Assessment'), ('LAB FEES', 'Lab Fees'), ('OTHER FEES', 'Other Fees')], max_length=20)),
            ],
            options={
                'db_table': 'billing_list',
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.CharField(choices=[('BSIT', 'Bsit'), ('BSCS', 'Bscs')], max_length=10, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'program',
            },
        ),
        migrations.CreateModel(
            name='AcadTermBilling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('year_level', models.IntegerField()),
                ('semester', models.IntegerField()),
                ('billing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.billinglist')),
            ],
            options={
                'db_table': 'acad_term_billing',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('lab_units', models.PositiveIntegerField(blank=True, null=True)),
                ('lec_units', models.PositiveIntegerField(blank=True, null=True)),
                ('contact_hr_lab', models.PositiveIntegerField(blank=True, null=True)),
                ('contact_hr_lec', models.PositiveIntegerField(blank=True, null=True)),
                ('year_level', models.PositiveIntegerField()),
                ('semester', models.PositiveIntegerField()),
                ('pre_requisites', models.ManyToManyField(blank=True, related_name='required_by', to='api.course')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='api.program')),
            ],
            options={
                'db_table': 'course',
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=55)),
                ('last_name', models.CharField(max_length=55)),
                ('middle_name', models.CharField(blank=True, max_length=55, null=True)),
                ('suffix', models.CharField(blank=True, max_length=10, null=True)),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('PREFER NOT TO SAY', 'Prefer Not To Say')], max_length=50)),
                ('email', models.CharField(blank=True, max_length=55, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=13, null=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instructors', to='api.address')),
            ],
            options={
                'db_table': 'instructor',
            },
        ),
        migrations.CreateModel(
            name='Sectioning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limit_per_section', models.PositiveIntegerField()),
                ('year_level', models.PositiveIntegerField()),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='api.program')),
            ],
            options={
                'db_table': 'sectioning',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid student number format.', regex='^(20[0-9]{2})(10|11)\\d{3}$')])),
                ('email', models.CharField(blank=True, max_length=55, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Email must be in Gmail or CvSU format.', regex='^[a-zA-Z0-9._%+-]+@(gmail\\.com|cvsu\\.edu\\.ph)$')])),
                ('first_name', models.CharField(max_length=55)),
                ('middle_name', models.CharField(blank=True, max_length=55, null=True)),
                ('last_name', models.CharField(max_length=55)),
                ('suffix', models.CharField(blank=True, max_length=10, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('PREFER NOT TO SAY', 'Prefer Not To Say')], max_length=50)),
                ('contact_number', models.CharField(blank=True, max_length=13, null=True, validators=[django.core.validators.RegexValidator(message='Invalid contact number.', regex='^(\\+63|0)(2\\d{8}|9\\d{9})$')])),
                ('status', models.CharField(choices=[('REGULAR', 'Regular'), ('IRREGULAR', 'Irregular'), ('TRANFEREE', 'Tranferee'), ('RETURNEE', 'Returnee')], max_length=15)),
                ('section', models.IntegerField()),
                ('year_level', models.PositiveIntegerField()),
                ('academic_year', models.CharField(blank=True, max_length=20, null=True)),
                ('category', models.CharField(blank=True, choices=[('OLD', 'Old'), ('NEW', 'New')], max_length=3, null=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='api.address')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='api.program')),
            ],
            options={
                'db_table': 'student',
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('terms', models.IntegerField()),
                ('status', models.CharField(choices=[('PAID', 'Paid'), ('UNPAID', 'Unpaid'), ('PENDING', 'Pending')], max_length=55)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.student')),
            ],
            options={
                'db_table': 'receipt',
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.CharField(blank=True, db_comment='1.00 to 5.00 or S scale', max_length=4, null=True)),
                ('remarks', models.CharField(blank=True, choices=[('PASSED', 'Passed'), ('FAILED', 'Failed'), ('INCOMPLETE', 'Incomplete'), ('CONDITIONAL FAILURE', 'Conditional Failure'), ('DROPPED SUBJECT', 'Dropped Subject'), ('NOT GRADED YET', 'Not Graded Yet')], max_length=20, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='api.course')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades_given', to='api.instructor')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='api.student')),
            ],
            options={
                'db_table': 'grade',
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('ENROLLED', 'Enrolled'), ('WAITLISTED', 'Waitlisted')], max_length=10)),
                ('school_year', models.CharField(max_length=20)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='api.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='api.student')),
            ],
            options={
                'db_table': 'enrollment',
            },
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('code', 'program'), name='unique_course_program'),
        ),
        migrations.AddConstraint(
            model_name='grade',
            constraint=models.UniqueConstraint(fields=('student', 'course'), name='unique_student_course_grade'),
        ),
        migrations.AddConstraint(
            model_name='enrollment',
            constraint=models.UniqueConstraint(fields=('course', 'student'), name='unique_enrollment'),
        ),
    ]
